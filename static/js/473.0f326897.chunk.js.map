{"version":3,"file":"static/js/473.0f326897.chunk.js","mappings":"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","sources":["Components/Dialogs/Dialogs.tsx","Components/Dialogs/DialogsContainer.tsx","hoc/withAuthRedirect.tsx","webpack://samuray_typescript/./src/Components/Dialogs/Dialogs.module.scss?d5e3","webpack://samuray_typescript/./src/Components/Profile/Profile.module.scss?dd72"],"sourcesContent":["import {Navigate, NavLink} from 'react-router-dom'\r\nimport dialogs from './Dialogs.module.scss'\r\nimport app from '../../App.module.scss';\r\nimport avatar from '../../images/avatar-dialog.css.png'\r\nimport dialogs_bg from '../../images/010.jpg'\r\nimport {useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../redux/redux_store';\r\nimport {DialogsType, MessagesType} from '../../redux/dialogs-reducer';\r\nimport React from 'react';\r\nimport { useFormik} from 'formik';\r\nimport profileStyle from '../Profile/Profile.module.scss';\r\n\r\ntype DialogsTypeProps = {\r\n    dialogsPage: Array<DialogsType>\r\n    sendMessage: (message: string) => void\r\n}\r\n\r\nexport function Dialogs(props: DialogsTypeProps) {\r\n    const messages = useSelector<AppRootStateType, Array<MessagesType>>(state => state.dialogsPage.messages)\r\n    const isLogginIn = useSelector<AppRootStateType, boolean>(state => state.auth.isAuth)\r\n\r\n    let dialogsData = props.dialogsPage.map(i => {\r\n        return (\r\n            <li key={i.id} className={dialogs.dialog}>\r\n                <NavLink to={`${i.id}`}\r\n                         className={({isActive}) => (isActive ? `${app.active_dialog}` : `${app.link}`)}>{i.name}</NavLink>\r\n            </li>\r\n        )\r\n    })\r\n\r\n    let messagesData = messages.map(i => {\r\n        return (\r\n            <li key={i.id} className={dialogs.message}>\r\n                <img className={dialogs.avatar} src={avatar} alt={'avatar'}/>\r\n                <div className={dialogs.text}>{i.message}</div>\r\n            </li>\r\n        )\r\n    })\r\n\r\n    if (!isLogginIn) return <Navigate to={'/login'}/>\r\n\r\n    return (\r\n        <div className={dialogs.dialogs_inner}>\r\n            <div><img className={dialogs.dialogs_img} src={dialogs_bg} alt={'background'}/></div>\r\n\r\n            <div className={dialogs.title}>Dialogs</div>\r\n            <div className={dialogs.block_dialog}>\r\n                <ul className={dialogs.dialogs_items}>\r\n                    {dialogsData}\r\n                </ul>\r\n                <ul className={dialogs.messages}>\r\n                    {messagesData}\r\n                </ul>\r\n            </div>\r\n\r\n            <AddMessageForm sendMessage={props.sendMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype addMessageFormType = {\r\n    sendMessage: (post: string) => void\r\n}\r\ntype FormikDialogErrorType = {\r\n    newMessageBody?: string\r\n}\r\nconst AddMessageForm = (props: addMessageFormType) => {\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            const errors: FormikDialogErrorType = {}\r\n\r\n            if(!values.newMessageBody) {\r\n                errors.newMessageBody = 'Please, write your message'\r\n            }\r\n            return errors\r\n        },\r\n\r\n        initialValues: {\r\n            newMessageBody: '',\r\n        },\r\n\r\n        onSubmit: values => {\r\n            props.sendMessage(values.newMessageBody)\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    //onKeyPress пропускает пустые сообщения и после ентера кликаю на кнопку то первое сообщение тоже проходит потом выдает ошибку.\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}\r\n              onKeyPress={(e) => {\r\n                  if (e.key === 'Enter') {\r\n                      formik.handleSubmit();\r\n                  }}}\r\n        >\r\n                <textarea\r\n                    className={app.message_textarea}\r\n                    name=\"newMessageBody\"\r\n                    placeholder=\"your message\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.newMessageBody}\r\n                ></textarea>\r\n            {}\r\n            <div>{formik.errors.newMessageBody ? <div className={dialogs.errors}>{formik.errors.newMessageBody}</div> : null}</div>\r\n            <div className={profileStyle.btn_box}>\r\n                <button className={app.message_btn}>Add Message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport {AppRootStateType} from '../../redux/redux_store';\r\nimport {connect} from 'react-redux';\r\nimport {Dialogs} from './Dialogs';\r\nimport {DialogsType, sendDialogsReducerAC} from '../../redux/dialogs-reducer';\r\nimport {compose, Dispatch} from 'redux';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\n\r\nclass DialogContainer extends React.Component<DialogsContainerPropsType> {\r\n    componentDidMount() {\r\n    }\r\n\r\n    render() {\r\n        return <Dialogs sendMessage={this.props.sendMessage} dialogsPage={this.props.dialogsPage}/>\r\n    }\r\n}\r\n\r\n// type\r\nexport type DialogsContainerPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\ntype MapDispatchToPropsType = {\r\n    sendMessage: (message: string) => void\r\n    getStatusUserTC: () => void\r\n    updateStatusUserTC: (status: string) => void\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: DialogsType[],\r\n}\r\n\r\nconst mapDispatchToPropsType = (dispatch: Dispatch) => {\r\n    return {\r\n        sendMessage: (message: string) => {\r\n            dispatch(sendDialogsReducerAC(message))\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStateToPropsType => ({\r\n    dialogsPage: state.dialogsPage.dialogs,\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToPropsType),\r\n    withAuthRedirect\r\n)(DialogContainer)","import React, {ComponentType} from 'react';\r\nimport {Navigate} from 'react-router-dom'\r\nimport {connect} from 'react-redux';\r\nimport {AppRootStateType} from '../redux/redux_store';\r\n\r\n\r\n//Function Component HOC\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToPropsForRedirect = (state: AppRootStateType): MapStatePropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        const {isAuth, ...restProps} = props;\r\n\r\n        if (!isAuth) return <Navigate to={\"/login\"} />\r\n        return <Component {...restProps as T} />\r\n    }\r\n\r\n    const ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"block_dialog\":\"Dialogs_block_dialog__gJoeA\",\"dialog\":\"Dialogs_dialog__5yYdu\",\"dialogs_inner\":\"Dialogs_dialogs_inner__-yvm9\",\"dialogs_items\":\"Dialogs_dialogs_items__4QoYV\",\"dialogs_img\":\"Dialogs_dialogs_img__JwBew\",\"messages\":\"Dialogs_messages__uLekC\",\"message\":\"Dialogs_message__pYQpE\",\"title\":\"Dialogs_title__FVSn0\",\"avatar\":\"Dialogs_avatar__Bvtoy\",\"text\":\"Dialogs_text__igKmM\",\"errors\":\"Dialogs_errors__BzIwx\"};","// extracted by mini-css-extract-plugin\nexport default {\"inner\":\"Profile_inner__LoIqE\",\"img\":\"Profile_img__F9KOQ\",\"post\":\"Profile_post__7abb9\",\"btn_box\":\"Profile_btn_box__CLdvs\"};"],"names":["Dialogs","props","messages","useSelector","state","dialogsPage","isLogginIn","auth","isAuth","dialogsData","map","i","className","dialogs","to","id","isActive","app","name","messagesData","src","avatar","alt","message","dialogs_bg","AddMessageForm","sendMessage","formik","useFormik","validate","values","errors","newMessageBody","initialValues","onSubmit","resetForm","handleSubmit","onKeyPress","e","key","placeholder","onChange","handleChange","value","profileStyle","DialogContainer","this","React","compose","connect","dispatch","sendDialogsReducerAC","withAuthRedirect","mapStateToPropsForRedirect","Component","restProps"],"sourceRoot":""}