{"version":3,"file":"static/js/583.a63135b8.chunk.js","mappings":"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","sources":["webpack://samuray_typescript/./src/Components/Profile/ProfileInfo/ProfileInfo.module.scss?c035","Components/Profile/ProfileInfo/ProfileDataForm.tsx","Components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samuray_typescript/./src/Components/Profile/MyPost/Post/Post.module.scss?3a86","Components/Profile/MyPost/Post/Post.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx","webpack://samuray_typescript/./src/Components/Dialogs/Dialogs.module.scss?d5e3","webpack://samuray_typescript/./src/Components/Profile/Profile.module.scss?dd72"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"info\":\"ProfileInfo_info__ba9+Z\",\"info_edit\":\"ProfileInfo_info_edit__FUMoJ\",\"box\":\"ProfileInfo_box__fn5wh\",\"aboutinfo\":\"ProfileInfo_aboutinfo__FEbBx\",\"aboutinfo_status\":\"ProfileInfo_aboutinfo_status__79hYl\",\"aboutinfo_edit\":\"ProfileInfo_aboutinfo_edit__kNtQl\",\"aboutinfo_edit_btn\":\"ProfileInfo_aboutinfo_edit_btn__gbQZo\",\"about_check_label\":\"ProfileInfo_about_check_label__HUzLa\",\"subtitle\":\"ProfileInfo_subtitle__f-Rly\",\"aboutinfo_value\":\"ProfileInfo_aboutinfo_value__LOxRr\",\"aboutinfo_value_key\":\"ProfileInfo_aboutinfo_value_key__OhKxd\",\"aboutinfo_value_box\":\"ProfileInfo_aboutinfo_value_box__d2EJw\",\"about\":\"ProfileInfo_about__Gb0wI\",\"name\":\"ProfileInfo_name__4FdHK\",\"name_box\":\"ProfileInfo_name_box__O9sFS\",\"name_edit\":\"ProfileInfo_name_edit__V5rhJ\",\"name_edit_box\":\"ProfileInfo_name_edit_box__jQxAP\",\"load_img\":\"ProfileInfo_load_img__zMMhL\",\"profile_box_img\":\"ProfileInfo_profile_box_img__35M26\",\"status_edit\":\"ProfileInfo_status_edit__XMfQg\",\"status_title\":\"ProfileInfo_status_title__baf+G\"};","import React, {useEffect} from 'react';\r\nimport profile_info from './ProfileInfo.module.scss';\r\nimport app from '../../../App.module.scss';\r\nimport {useFormik} from 'formik';\r\nimport {CreateInputField} from '../../../utils/object-helpers';\r\nimport {saveProfileTC} from '../../../redux/posts-reducer';\r\nimport {useAppDispatch} from '../../../redux/redux_store';\r\nimport profile_img from '../../../images/profile.jpg';\r\nimport cn from 'classnames';\r\nimport {ProfileResponseType} from '../ProfileContainer';\r\n\r\ntype ProfileDataFormType = {\r\n    setEditMode: (value: boolean) => void;\r\n    profile: ProfileResponseType\r\n}\r\n\r\nexport const ProfileDataForm: React.FC<ProfileDataFormType> = ({setEditMode, profile}) => {\r\n    const dispatch = useAppDispatch();\r\n\r\n    console.log('profile', profile)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            fullName: '',\r\n            lookingForAJob: false,\r\n            lookingForAJobDescription: '',\r\n            aboutMe: '',\r\n            userId: 1,\r\n            contacts: {\r\n                github: '',\r\n                vk: '',\r\n                facebook: '',\r\n                instagram: '',\r\n                twitter: '',\r\n                website: '',\r\n                youtube: '',\r\n                mainLink: '',\r\n            },\r\n            photos: {\r\n                small: profile_img,\r\n                large: profile_img,\r\n            }\r\n        },\r\n        onSubmit: values => {\r\n            // alert(JSON.stringify(values, null, 2));\r\n            dispatch(saveProfileTC(values))\r\n            setEditMode(false)\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    useEffect(() => {\r\n        formik.setFieldValue('lookingForAJob', profile.lookingForAJob)\r\n        formik.setFieldValue('lookingForAJobDescription', profile.lookingForAJobDescription)\r\n        formik.setFieldValue('aboutMe', profile.aboutMe)\r\n        formik.setFieldValue('fullName', profile.fullName)\r\n    }, [profile])\r\n\r\n\r\n    return (<form onSubmit={formik.handleSubmit}>\r\n        <div className={profile_info.name_edit}>\r\n            <div className={profile_info.subtitle}>Full name:</div>\r\n            <div className={profile_info.about}>\r\n                <input\r\n                    placeholder={'Full name'}\r\n                    name={'fullName'}\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.fullName}\r\n                />\r\n            </div>\r\n\r\n        </div>\r\n\r\n        <div className={profile_info.aboutinfo_edit}>\r\n            <div className={profile_info.subtitle}>Looking for a job:</div>\r\n            <input\r\n                id=\"check\"\r\n                type={'checkbox'}\r\n                name={'lookingForAJob'}\r\n                onChange={formik.handleChange}\r\n                checked={formik.values.lookingForAJob}\r\n            />\r\n            <label className={profile_info.about_check_label} htmlFor=\"check\"></label>\r\n        </div>\r\n\r\n        <div className={profile_info.aboutinfo_edit}>\r\n            <div className={profile_info.subtitle}>My professional skills:</div>\r\n            <div className={profile_info.about}><textarea\r\n                placeholder={'My skills'}\r\n                name={'lookingForAJobDescription'}\r\n                onChange={formik.handleChange}\r\n                value={formik.values.lookingForAJobDescription}\r\n            ></textarea></div>\r\n        </div>\r\n\r\n        <div className={profile_info.aboutinfo_edit}>\r\n            <div className={profile_info.subtitle}>About me:</div>\r\n            <div className={profile_info.about}><textarea\r\n                placeholder={'About me'}\r\n                name={'aboutMe'}\r\n                onChange={formik.handleChange}\r\n                value={formik.values.aboutMe}\r\n            ></textarea></div>\r\n        </div>\r\n\r\n        <div className={profile_info.aboutinfo}>Contacts:\r\n            <span className={profile_info.about}>{Object.keys(formik.values.contacts).map(key => {\r\n                return <div key={key} className={cn(profile_info.name_edit)}>\r\n                    <span className={profile_info.name_edit_box}>{key}:</span>\r\n                    {CreateInputField(key, 'contacts.' + key, formik.handleChange, 'text')}\r\n                </div>\r\n            })}\r\n            </span>\r\n        </div>\r\n\r\n        <div className={profile_info.aboutinfo_edit_btn}>\r\n            <button className={app.message_btn} type={'submit'}>save</button>\r\n        </div>\r\n\r\n    </form>)\r\n}\r\n\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport profile_info from './ProfileInfo.module.scss'\r\nimport {useAppDispatch} from '../../../redux/redux_store';\r\nimport {updateStatusUserTC} from '../../../redux/posts-reducer';\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n//84 lesson 10 min\r\nexport const ProfileStatusWithHooks: React.FC<ProfileStatusPropsType> = (props: ProfileStatusPropsType) => {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const [editMode, setEditMode] = useState(false)  //same name I have in other local state - in ProfileDataForm\r\n                         // This work only here. If forward same state from ProfileDataForm they will work together\r\n   const [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {                   //need for render status from state in input when first render\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activeEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        dispatch(updateStatusUserTC(status)).then()\r\n    }\r\n\r\n    const onStatusChange = (e:ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div className={profile_info.aboutinfo_status}><span className={profile_info.status_title}>Status:</span>\r\n            {!editMode &&\r\n                <span\r\n                    className={profile_info.about}\r\n                    onDoubleClick={activeEditMode}\r\n                >{props.status || ' --/---/--'}</span>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input\r\n                        onChange={onStatusChange}\r\n                        autoFocus\r\n                        onBlur={deactivateEditMode}\r\n                        value={status}   //show status from state. Not from props\r\n                        className={profile_info.status_edit}\r\n                    />\r\n                </div>\r\n            }\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n","import profile_info from './ProfileInfo.module.scss';\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport {ProfileResponseType} from '../ProfileContainer';\r\nimport photoUser from '../../../images/icon-user.png';\r\nimport React, {ChangeEvent, useState} from 'react';\r\nimport {ProfileDataForm} from './ProfileDataForm';\r\nimport pen from '../../../images/pen.png';\r\nimport {ProfileStatusWithHooks} from './ProfileStatusWithHooks';\r\nimport {savePhotoTC} from '../../../redux/posts-reducer';\r\nimport {useAppDispatch} from '../../../redux/redux_store';\r\n\r\ntype ProfileInfoProps = {\r\n    profile: ProfileResponseType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean  //responsible show profile & edit btn if we stay in edit mode\r\n}\r\n\r\nexport const ProfileInfo: React.FC<ProfileInfoProps> = ({profile, status, updateStatus, isOwner}) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const dispatch = useAppDispatch();\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelector = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.files) {\r\n            dispatch(savePhotoTC(e.currentTarget.files[0])).then()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={profile_info.info}>\r\n            <div className={profile_info.profile_box_img}>\r\n                <img\r\n                    src={profile.photos.small || photoUser}\r\n                    width=\"180\"\r\n                    height=\"180\"\r\n                    alt=\"avatar\"/>\r\n\r\n                {isOwner &&\r\n                    <label className={profile_info.load_img}>\r\n                        <input\r\n                            type={'file'}\r\n                            onChange={onMainPhotoSelector}/>\r\n                    </label>\r\n                }\r\n            </div>\r\n\r\n\r\n            <div className={profile_info.box}>\r\n\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n\r\n                {editMode ? <ProfileDataForm setEditMode={setEditMode} profile={profile}/>\r\n                    :\r\n                    <ProfileData\r\n                        profile={profile}\r\n                        isOwner={isOwner}\r\n                        goToEditMode={() => setEditMode(true)}\r\n                    />}\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileResponseType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\nexport const ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\r\n\r\n    return <>\r\n        <div>\r\n            {isOwner && <div>\r\n                <div onClick={goToEditMode} className={profile_info.info_edit}><img src={pen} alt=\"edit\"/></div>\r\n            </div>}\r\n\r\n            <div className={profile_info.name_box}>Full name:<span\r\n                className={profile_info.name}>{profile.fullName}</span></div>\r\n\r\n            <div className={profile_info.aboutinfo}>Looking for a job:\r\n                <span className={profile_info.about}>{profile.lookingForAJob ? 'yes' : 'no'}</span>\r\n            </div>\r\n            {\r\n                profile.lookingForAJob && <div className={profile_info.aboutinfo}>My professionak skills:\r\n                    <span className={profile_info.about}>{profile.lookingForAJobDescription}</span>\r\n                </div>\r\n            }\r\n            <div className={profile_info.aboutinfo}>About me:\r\n                <span className={profile_info.about}>{profile.aboutMe}</span>\r\n            </div>\r\n\r\n\r\n            <div className={profile_info.aboutinfo}>Contacts:\r\n                <span >{Object.keys(profile.contacts).map(key => {\r\n                    // @ts-ignore\r\n                    return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n\r\n                })}</span>\r\n            </div>\r\n        </div>\r\n\r\n    </>\r\n}\r\n\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\nexport const Contact: React.FC<ContactPropsType> = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <div className={profile_info.aboutinfo_value_box}>\r\n            <div className={profile_info.aboutinfo_value}>{contactTitle}</div>\r\n            <div  className={profile_info.aboutinfo_value_key}>{contactValue}</div>\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__S4TUf\",\"item_text\":\"Post_item_text__Mo597\",\"img\":\"Post_img__NcBeS\",\"like\":\"Post_like__45Jxh\"};","import post from './Post.module.scss'\r\nimport {useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../../../redux/redux_store';\r\nimport {PostsType} from '../../../../redux/posts-reducer';\r\n\r\ntype  postTypeProps = {}\r\n\r\nexport const Post:React.FC<postTypeProps> = () => {\r\n    const posts = useSelector<AppRootStateType, Array<PostsType>>(state => state.profilePage.posts)\r\n\r\n    let resultPost = posts.map(i => {\r\n        return (\r\n            <li className={post.item} key={i.id}>\r\n                <div>\r\n                    <img\r\n                        className={post.img}\r\n                        src={i.img}\r\n                        width='90'\r\n                        height='90'\r\n                        alt=\"avatar\"/>\r\n                </div>\r\n\r\n                <p className={post.item_text}>{i.post}</p>\r\n                <span className={post.like}> {i.like}</span>\r\n            </li>\r\n        )\r\n    })\r\n    return (\r\n        <>{resultPost}</>\r\n    )\r\n}\r\n","import profileStyle from './Profile.module.scss'\r\nimport app from '../../App.module.scss';\r\nimport profile_img from '../../images/profile.jpg';\r\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo';\r\nimport {Post} from './MyPost/Post/Post';\r\nimport {ProfileResponseType} from './ProfileContainer';\r\nimport {useFormik} from 'formik';\r\nimport dialogs from '../Dialogs/Dialogs.module.scss';\r\nimport React from 'react';\r\nimport {addPostsReducerAC} from '../../redux/posts-reducer';\r\nimport {useAppDispatch} from '../../redux/redux_store';\r\n\r\ntype profileTypeProps = {\r\n    profile: ProfileResponseType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n}\r\n\r\nexport const Profile: React.FC<profileTypeProps> = ({ profile, status, updateStatus, isOwner}) => {\r\n    console.log('profile', profile)\r\n\r\n    const dispatch = useAppDispatch();\r\n    const addPost = (post: string) => {\r\n        dispatch(addPostsReducerAC(post))\r\n    }\r\n\r\n    return (\r\n        <div className={profileStyle.inner}>\r\n            <img\r\n                className={profileStyle.img}\r\n                src={profile_img}\r\n                height=\"300\"\r\n                width=\"100%\"\r\n                alt=\"profile\"/>\r\n\r\n            <ProfileInfo\r\n                // savePhoto={savePhoto}\r\n                isOwner={isOwner} profile={profile} status={status} updateStatus={updateStatus}/>\r\n\r\n            <div className={profileStyle.post}>\r\n                <h3>My posts</h3>\r\n                <AddNewPostForm addPost={addPost}/>\r\n            </div>\r\n            <ul>\r\n                <Post/>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\ntype addPostFormType = {\r\n    addPost: (post: string) => void\r\n}\r\ntype FormikPostErrorType = {\r\n    newPostText?: string\r\n}\r\nconst AddNewPostForm = (props: addPostFormType) => {\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            const errors: FormikPostErrorType = {}\r\n\r\n            if (!values.newPostText) {\r\n                errors.newPostText = 'Please, write your post'\r\n            }\r\n            return errors\r\n        },\r\n\r\n        initialValues: {\r\n            newPostText: '',\r\n        },\r\n        onSubmit: values => {\r\n            props.addPost(values.newPostText)\r\n            formik.resetForm()\r\n        },\r\n    })\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}\r\n            onKeyPress={(e) => {\r\n                if (e.key === 'Enter') {\r\n                    formik.handleSubmit();\r\n                }}}>\r\n\r\n                <textarea\r\n                    className={app.message_textarea}\r\n                    name=\"newPostText\"\r\n                    placeholder=\"your news\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.newPostText}\r\n                ></textarea>\r\n            <div>{formik.errors.newPostText ?\r\n                <div className={dialogs.errors}>{formik.errors.newPostText}</div> : null}</div>\r\n            <div className={profileStyle.btn_box}>\r\n                <button className={app.message_btn}>Add Post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {Profile} from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {AppRootStateType} from '../../redux/redux_store';\r\nimport {\r\n    getProfileUserTC,\r\n    getStatusUserTC,\r\n    updateStatusUserTC\r\n} from '../../redux/posts-reducer';\r\n\r\nimport {\r\n    // @ts-ignore\r\n    RouteComponentProps,\r\n} from 'react-router-dom';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport {compose} from 'redux';\r\nimport {withRouter} from '../../hoc/withRouter';\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.router.params.userId;\r\n        // let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getProfileUserTC(userId)\r\n        this.props.getStatusUserTC(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        //96 lessons samuray 13 min\r\n        if (this.props.router.params.userId !== prevProps.router.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.router.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatusUserTC}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStateToPropsType => ({  // not return, so I wrote ({...})\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n//When make separately mapDispatchToProps y put all inside - don't work. Better forward in connect\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getProfileUserTC, getStatusUserTC, updateStatusUserTC}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n//type\r\ntype MapStateToPropsType = {\r\n    profile: ProfileResponseType,\r\n    isAuth: boolean,\r\n    status: string,\r\n    authorizedUserId: number | null\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getProfileUserTC: (userId: number) => void\r\n    getStatusUserTC: (userId: string) => void\r\n    updateStatusUserTC: (status: string) => void\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype ProfileContainerPropsType = MapStateToPropsType | MapDispatchPropsType\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileContainerPropsType  //RouteComponentProps fined this decision in internet\r\n\r\nexport type ProfileResponseType = {\r\n    userId: number,\r\n    lookingForAJob: boolean,\r\n    lookingForAJobDescription: string,\r\n    aboutMe: string,\r\n    fullName: string,\r\n    contacts: {\r\n        github: string,\r\n        vk: string,\r\n        facebook: string,\r\n        instagram: string,\r\n        twitter: string,\r\n        website: string,\r\n        youtube: string,\r\n        mainLink: string,\r\n    }\r\n    photos: {\r\n        small: string,\r\n        large: string\r\n    }\r\n}\r\n\r\n\r\n","import React, {ComponentType} from 'react';\r\nimport {Navigate} from 'react-router-dom'\r\nimport {connect} from 'react-redux';\r\nimport {AppRootStateType} from '../redux/redux_store';\r\n\r\n\r\n//Function Component HOC\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToPropsForRedirect = (state: AppRootStateType): MapStatePropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        const {isAuth, ...restProps} = props;\r\n\r\n        if (!isAuth) return <Navigate to={\"/login\"} />\r\n        return <Component {...restProps as T} />\r\n    }\r\n\r\n    const ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"block_dialog\":\"Dialogs_block_dialog__gJoeA\",\"dialog\":\"Dialogs_dialog__5yYdu\",\"dialogs_inner\":\"Dialogs_dialogs_inner__-yvm9\",\"dialogs_items\":\"Dialogs_dialogs_items__4QoYV\",\"dialogs_img\":\"Dialogs_dialogs_img__JwBew\",\"messages\":\"Dialogs_messages__uLekC\",\"message\":\"Dialogs_message__pYQpE\",\"title\":\"Dialogs_title__FVSn0\",\"avatar\":\"Dialogs_avatar__Bvtoy\",\"text\":\"Dialogs_text__igKmM\",\"errors\":\"Dialogs_errors__BzIwx\"};","// extracted by mini-css-extract-plugin\nexport default {\"inner\":\"Profile_inner__LoIqE\",\"img\":\"Profile_img__F9KOQ\",\"post\":\"Profile_post__7abb9\",\"btn_box\":\"Profile_btn_box__CLdvs\"};"],"names":["ProfileDataForm","setEditMode","profile","dispatch","useAppDispatch","console","log","formik","useFormik","initialValues","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","userId","contacts","github","vk","facebook","instagram","twitter","website","youtube","mainLink","photos","small","profile_img","large","onSubmit","values","saveProfileTC","resetForm","useEffect","setFieldValue","handleSubmit","className","profile_info","placeholder","name","onChange","handleChange","value","id","type","checked","htmlFor","Object","keys","map","key","cn","CreateInputField","app","ProfileStatusWithHooks","props","useState","editMode","status","setStatus","onDoubleClick","e","currentTarget","autoFocus","onBlur","updateStatusUserTC","then","ProfileInfo","updateStatus","isOwner","Preloader","src","photoUser","width","height","alt","files","savePhotoTC","ProfileData","goToEditMode","onClick","pen","Contact","contactTitle","contactValue","Post","resultPost","useSelector","state","profilePage","posts","i","post","img","like","Profile","profileStyle","AddNewPostForm","addPost","addPostsReducerAC","validate","errors","newPostText","onKeyPress","dialogs","ProfileContainer","this","router","params","authorizedUserId","history","push","getProfileUserTC","getStatusUserTC","refreshProfile","prevProps","prevState","snapshot","React","compose","connect","auth","isAuth","withRouter","withAuthRedirect","mapStateToPropsForRedirect","Component","restProps","to"],"sourceRoot":""}